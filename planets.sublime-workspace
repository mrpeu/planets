{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"inner",
				"innerWidth-5"
			],
			[
				"res",
				"resizeContainer"
			],
			[
				"conta",
				"containerResize"
			],
			[
				"CAN",
				"CANVAS_WIDTH"
			],
			[
				"CA",
				"CANVAS_HEIGHT"
			],
			[
				"mouse",
				"mouseWheel"
			],
			[
				"ge",
				"geometry"
			],
			[
				"proto",
				"prototype"
			],
			[
				"se",
				"segW"
			],
			[
				"star",
				"stars"
			],
			[
				"direct",
				"directionalLight"
			],
			[
				"plane",
				"Planet"
			],
			[
				"planet",
				"planetId"
			],
			[
				"_",
				"_SocketStatus"
			],
			[
				"connection",
				"connectionLoopId"
			]
		]
	},
	"buffers":
	[
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 1170,
				"line_ending": "Windows"
			}
		},
		{
			"file": "index.css",
			"settings":
			{
				"buffer_size": 988,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "\n\n//----------\n// utils\n\n// src: https://github.com/soulwire/sketch.js/blob/master/js/sketch.js\nfunction random( min, max ) {\n  if ( Object.prototype.toString.call( min ) == '[object Array]' )\n    return min[~~( Math.random() * min.length )];\n  if ( typeof max != 'number' )\n    max = min || 1, min = 0;\n  return min + Math.random() * ( max - min );\n}\nfunction extend( target, source, overwrite ) {\n  for ( var key in source )\n    if ( overwrite || !target.hasOwnProperty( key ) )\n      target[key] = source[key];\n  return target;\n}\n\n// src: Paul Irish obv\nwindow.requestAnimFrame = ( function () {\n  return window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    function (/* function FrameRequestCallback */ callback, /* DOMElement Element */ element ) {\n      window.setTimeout( callback, 1000 / 60 );\n    };\n} )();\n\n\n\n\nGame = function ( container ) {\n\n  var Planet = function ( param ) {\n    param = param || {};\n\n    this.mouseable = param.mouseable || true;\n    //radius\n    this.radius = param.radius || random( 7, 15 );\n    // speed\n    this.sx = param.sx || random( -0.5, 0.5 );\n    this.sy = param.sy || random( -0.5, 0.5 );\n    // acceleration\n    this.ax = param.ax || 0.0;\n    this.ay = param.ay || 0.0;\n    // rotation\n    this.rx = param.rx || random( -0.01, 0.008 );\n    this.ry = param.ry || random( -0.01, 0.008 );\n    // rotation speed\n    this.rsx = param.rsx || random( -0.01, 0.01 );\n    this.rsy = param.rsy || random( -0.01, 0.01 );\n    // nb segments of the sphere geometry\n    this.segW = param.segW || random( 5, 10 );\n    this.segH = param.segH || random( 5, 10 );\n\n    if ( typeof ( param.mat ) !== 'undefined' ) {\n      param.mat.ambient = param.mat.color;\n      this.material = new THREE.MeshLambertMaterial( param.mat );\n    }\n    else\n      this.material = new THREE.MeshLambertMaterial( { color: 0xFFFFFF, wireframe: true } );\n\n    var geometry = new THREE.SphereGeometry( this.radius, this.segW, this.segH );\n    geometry.mergeVertices();\n\n    this.mesh = new THREE.Mesh( geometry, this.material );\n\n    this.mesh.position.x = param.x || 0;\n    this.mesh.position.y = param.y || 0;\n\n    this.mesh.rotation.x = param.rx || 0;\n    this.mesh.rotation.y = param.ry || 0;\n\n    this.mesh.glowMesh = this.initGlow( this.mesh );\n\n    this.knead( param.knead || .5 );\n\n    this.planetId = this.mesh.planetId = Planet.prototype.planetId++;\n\n    this.mesh.name = \"Planet\" + this.planetId;\n    this.mesh.glowMesh.name = this.mesh.name + \"-\" + \"glowMesh\";\n  };\n\n  Planet.prototype.planetId = 0;\n\n  Planet.prototype.initGlow = function ( mesh ) {\n\n    var matGlow = new THREE.ShaderMaterial(\n      {\n        uniforms:\n        {\n          glowColor: { type: \"v3\", value: mesh.material.color },\n          power: { type: \"f\", value: 1 }\n        },\n        vertexShader: document.getElementById( 'vsGlow' ).textContent,\n        fragmentShader: document.getElementById( 'fsGlow' ).textContent,\n        side: THREE.BackSide,\n        blending: THREE.AdditiveBlending,\n        transparent: true\n      }\n    );\n    var geom = new THREE.SphereGeometry( mesh.geometry.radius, 30, 30 );\n    //var geom = mesh.geometry.clone();\n\n    var glowMesh = new THREE.Mesh( geom, matGlow );\n    glowMesh.scale.x = glowMesh.scale.y = glowMesh.scale.z = 1.5;\n    glowMesh.visible = false;\n\n    mesh.add( glowMesh );\n\n    return glowMesh;\n  };\n\n  Planet.prototype.move = function ( ctx ) {\n\n    if ( this.free ) {\n\n      this.mesh.position.x += this.sx;\n      this.mesh.position.y += this.sy;\n\n      this.sx += this.ax;\n      this.sy += this.ay;\n    }\n\n    this.mesh.rotation.x += this.rsx;\n    this.mesh.rotation.y += this.rsy;\n\n  };\n\n  Planet.prototype.knead = function ( min, max ) {\n\n    if ( min == undefined ) return;\n\n    if ( max == undefined ) {\n      var d = min / 2;\n      max = 1 + d;\n      min = 1 - d;\n    }\n\n    var r = this.radius / 10;\n\n    this.mesh.geometry.vertices.forEach( function ( v ) {\n\n      v.multiplyScalar( random( min, max ) );\n\n      v[random( ['x', 'y', 'z'] )] += random( r );\n\n    }, this.mesh );\n  }\n\n\n  var PlanetYellow = function ( param ) {\n\n    param = param || {};\n    param.mat = param.mat || {};\n    param.mat.color = param.mat.color || 0xEEEE11;\n\n    Planet.call( this, param );\n  }\n\n  PlanetYellow.prototype = Object.create( Planet.prototype );\n\n\n  var PlanetBlue = function ( param ) {\n\n    param = param || {};\n    param.mat = param.mat || {};\n    param.mat.color = param.mat.color || 0x0CCFFF;\n\n    Planet.call( this, param );\n  }\n\n  PlanetBlue.prototype = Object.create( Planet.prototype );\n\n\n  var PlanetRed = function ( param ) {\n\n    param = param || {};\n    param.mat = param.mat || {};\n    param.mat.color = param.mat.color || 0xFF4444;\n\n    Planet.call( this, param );\n  }\n\n  PlanetRed.prototype = Object.create( Planet.prototype );\n\n\n  // vars for mouseMove\n  var ray = new THREE.Raycaster();\n  var projector = new THREE.Projector();\n  var directionVector = new THREE.Vector3();\n  var starsHovered = []; // id of the star currently hovered\n\n  var mouseMove = function ( e ) {\n\n    var x = e.clientX - this.CANVAS_WIDTH / 2,\n        y = -e.clientY + this.CANVAS_HEIGHT / 2,\n        mouseVec3 = new THREE.Vector3( x, y, 0 ),\n        _starsHovered = starsHovered,\n        // loop vars\n        star, d, r\n    ;\n\n    starsHovered = [];\n\n    for ( i in stars ) {\n      star = stars[i];\n      d = star.mesh.position.distanceTo( mouseVec3 );\n      r = star.mesh.geometry.boundingSphere.radius;\n\n      if ( d < r ) {\n        starsHovered.push( star.planetId );\n        star.mesh.glowMesh.visible = true;\n      }\n    }\n\n    if ( _starsHovered.length > 0 )\n      for ( i in stars ) {\n        var star = stars[i];\n\n        for ( j in _starsHovered ) {\n          var _starId = _starsHovered[j];\n\n          if ( star.planetId == _starId )\n            if ( starsHovered.indexOf( star.planetId ) < 0 ) {\n              star.mesh.glowMesh.visible = false;\n              break;\n            }\n        }\n      }\n\n  };\n\n  var mouseWheel = function( e ){\n    this.zoom += e.wheelDelta/1000;\n\n    this.CANVAS_WIDTH = this.container.clientWidth;\n    this.CANVAS_HEIGHT = this.container.clientHeight;\n\n    var aspect = this.CANVAS_WIDTH/this.CANVAS_HEIGHT;\n    this.camera.aspect = aspect;\n\n    this.CANVAS_WIDTH *= this.zoom;\n    this.CANVAS_HEIGHT *= this.zoom;\n\n    this.camera.left = this.CANVAS_WIDTH / -2;\n    this.camera.right = this.CANVAS_WIDTH / 2;\n    this.camera.top = this.CANVAS_HEIGHT / 2;\n    this.camera.bottom = this.CANVAS_HEIGHT / -2;\n\n    this.camera.updateProjectionMatrix();\n  };\n\n\n  Game.prototype.resizeContainer = function () {\n\n    CANVAS_WIDTH  = window.innerWidth-5;\n    CANVAS_HEIGHT = window.innerHeight-5;          \n\n    this.renderer.setSize( CANVAS_WIDTH, CANVAS_HEIGHT );\n\n    this.camera.left = CANVAS_WIDTH / - 2;\n    this.camera.right = CANVAS_WIDTH / 2;\n    this.camera.top = CANVAS_HEIGHT / 2;\n    this.camera.bottom = CANVAS_HEIGHT / - 2;\n    \n    this.camera.updateProjectionMatrix();\n  };\n\n  Game.prototype.update = function ( ctx ) {\n\n    for ( var i = stars.length - 1; i >= 0; i-- ) {\n      stars[i].move( ctx );\n    }\n\n  };\n\n  Game.prototype.render = function () {\n\n    window.requestAnimFrame( this.render.bind(this) );\n\n    this.update( this );\n\n    this.renderer.render( this.scene, this.camera );\n\n  };\n\n\n  /**********\n   * Init\n   */\n\n  this.map = [{\n    name: \"0\",\n    home: new Planet( {\n      radius: 30,\n      rx: random( 1 ), ry: random( 1 ),\n      rsx: Number.MIN_VALUE, rsy: Number.MIN_VALUE,\n      mat: { color: 0x77FF55, shading: THREE.FlatShading },\n      segW: 6, segH: 4, knead: .1\n    } ),\n    planets: [\n      new PlanetRed( { x: -150, y: 150 } ),\n      new PlanetRed( { x: 200, y: 20 } ),\n      new PlanetYellow( { x: -200, y: -200 } ),\n      new PlanetYellow( { x: 150, y: 200 } ),\n      new PlanetBlue( { x: 500, y: -250 } ),\n      new PlanetBlue( { x: -500, y: 100 } )\n    ]\n  }];\n\n  this.zoom = 1;\n\n  this.container = container || document.body;//getElementById(\"container\")\n\n  this.currentMapIndex = 0;\n\n  //this.CANVAS_WIDTH = 640, this.CANVAS_HEIGHT = 480;\n  this.CANVAS_WIDTH = window.innerWidth - 5;\n  this.CANVAS_HEIGHT = window.innerHeight - 5;\n  //this.CANVAS_WIDTH = container.clientWidth;\n  //this.CANVAS_HEIGHT = container.clientHeight;\n\n  this.renderer = new THREE.WebGLRenderer( { antialias: true } );\n\n  this.renderer.setSize( this.CANVAS_WIDTH, this.CANVAS_HEIGHT );\n\n  this.container.appendChild( this.renderer.domElement );\n\n  this.scene = new THREE.Scene();\n\n\n  var stars = [];\n  var currentMap = this.map[this.currentMapIndex];\n\n  // create home\n  var p = currentMap.home;\n  stars.push( p );\n  this.scene.add( p.mesh );\n\n  //console.log(\"Created \" + p.mesh.name + \" #\" + p.planetId + \". proto=#\" + Planet.prototype.planetId);\n\n  // create satellites\n  for ( var i = currentMap.planets.length - 1; i >= 0; i-- ) {\n\n    p = currentMap.planets[i];\n\n    stars.push( p );\n\n    this.scene.add( p.mesh );\n\n    //console.log(\"Created \" + p.mesh.name + \" #\" + p.planetId + \". proto=#\" + Planet.prototype.planetId);\n\n  };\n\n  /*\n    // set a hemisphere light\n    var hemiLight = new THREE.HemisphereLight( 0xffffff, 0xdddddd, .6 );\n    scene.add( hemiLight );\n  */\n  /*\n    // set a directional light\n    var directionalLight = new THREE.DirectionalLight( 0xdddddd, 1 );\n    directionalLight.position.z = 1000;\n    directionalLight.name = \"directionalLight\";\n    scene.add( directionalLight );\n  */\n\n  // set point lights\n  var lightZ = 500, lightXY = 750, lightColor = 0xFFFFFF, lightIntensity = .6, lightDistance = undefined;\n\n  var pointLight0 = new THREE.PointLight( lightColor, lightIntensity, lightDistance );\n  pointLight0.position.set( -lightXY, lightXY, lightZ );\n  pointLight0.name = \"pointLight0\";\n  this.scene.add( pointLight0 );\n\n  var pointLight1 = new THREE.PointLight( lightColor, lightIntensity, lightDistance );\n  pointLight1.position.set( lightXY, lightXY, lightZ );\n  pointLight1.name = \"pointLight0\";\n  this.scene.add( pointLight1 );\n  var pointLight2 = new THREE.PointLight( lightColor, lightIntensity, lightDistance );\n  pointLight2.position.set( lightXY, -lightXY, lightZ );\n  pointLight2.name = \"pointLight0\";\n  this.scene.add( pointLight2 );\n  var pointLight3 = new THREE.PointLight( lightColor, lightIntensity, lightDistance );\n  pointLight3.position.set( -lightXY, -lightXY, lightZ );\n  pointLight3.name = \"pointLight3\";\n  this.scene.add( pointLight3 );\n\n  /*\n  var ambientLight = new THREE.AmbientLight( 0x444444 );\n  ambientLight.name = \"ambientLight\";\n  scene.add(ambientLight);\n  */\n\n  window.addEventListener( 'resize', this.resizeContainer.bind(this) );\n\n  window.addEventListener( 'mousewheel', mouseWheel.bind( this ) );\n\n  this.container.addEventListener( 'mousemove', mouseMove.bind( this ) );\n\n\n  var width = this.CANVAS_WIDTH * this.zoom,\n      height = this.CANVAS_HEIGHT * this.zoom;\n\n  this.camera = new THREE.OrthographicCamera( width / -2, width / 2, height / 2, height / -2, -100, 600 );\n\n};\n\n\n\nvar game;\n\ntry {\n  game = new Game();\n}\ncatch ( error ) {\n  nogl = document.getElementById( \"nogl\" );\n  nogl.innerHTML += \"<h2>\" + error.message + \"</h2>\";\n  nogl.innerHTML += \"<p>\" + error.stack + \"</p>\";\n  nogl.style.display = 'block';\n}\n\nif(game != \"undefined\")\n  game.render();\n\n\n\n\n\n\n\n\n// next step: http://stemkoski.github.io/Three.js/Mouse-Over.html\n// or http://yomotsu.github.io/threejs-examples/ray_basic/\n// http://www.89a.co.uk/page/14",
			"file": "index.js",
			"file_size": 11958,
			"file_write_time": 130202584519744011,
			"settings":
			{
				"buffer_size": 11527,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"pack",
				"Preferences: Browse Packages"
			],
			[
				"packa",
				"Preferences: Browse Packages"
			]
		],
		"width": 416.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/gpe/AppData/Roaming/Sublime Text 3/Packages/User/JavaScript.sublime-settings",
		"/C/Users/gpe/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/gpe/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/gpe/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Users/gpe/Documents/Visual Studio 2012/Projects/development(msc)/src/mpro.excel/mpro.excel.csproj",
		"/C/Users/gpe/Documents/Visual Studio 2012/Projects/development(msc)/src/mpro.excel/mpro.excel.json",
		"/C/Users/gpe/Desktop/bak/src/mpro.excel/mpro.excel.csproj",
		"/C/Users/gpe/Desktop/bak/src/mpro.excel/mpro.excel.json",
		"/C/Users/gpe/Documents/Visual Studio 2012/Projects/development(msc)/WebSockets.html",
		"/W/public/mpro.excel.json",
		"/C/Users/gpe/Documents/Visual Studio 2012/Projects/TestWebSocket/Alchemy-Websockets/Alchemy.sln.DotSettings.user",
		"/C/Users/gpe/Documents/Visual Studio 2012/Settings/monokai-according-to-sublime-text-editor-2.vssettings",
		"/C/Users/gpe/Downloads/sublime-text-2-new-edition.vssettings",
		"/C/Users/gpe/AppData/Roaming/Microsoft/Windows/Libraries/VS 2012.library-ms",
		"/C/Users/gpe/AppData/Roaming/Microsoft/Windows/Libraries/VS 2010.library-ms",
		"/C/Users/gpe/AppData/Roaming/Microsoft/Windows/Libraries/VS Project.library-ms",
		"//srv-cockpit/Temp/uw/test insert.sql"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"CANVAS_HEIGHT",
			"this.geometr",
			"500",
			"\n  //---------\n  // Map\n  //\n",
			"', '",
			"scene.a",
			"\\n",
			"\\n|\\s*",
			"\\n\\s*",
			"\\n",
			"\\r\\n",
			"\\\\r\\\\n",
			"currentSessionDiv",
			"logger",
			"LoggerWeb",
			"0E3A6C",
			"marg"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"lightXY",
			": undefined, ",
			"\"+\\n\"",
			"",
			"\\r\\n"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1170,
						"regions":
						{
						},
						"selection":
						[
							[
								397,
								397
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "index.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 988,
						"regions":
						{
						},
						"selection":
						[
							[
								283,
								283
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "index.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11527,
						"regions":
						{
						},
						"selection":
						[
							[
								6154,
								6154
							]
						],
						"settings":
						{
							"auto_name": "",
							"spell_check": false,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3209.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"project": "",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"C:\\Users\\gpe\\Documents\\default.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}

{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"thunder",
				"thunderGeo"
			],
			[
				"geom",
				"geometry"
			],
			[
				"inner",
				"innerWidth-5"
			],
			[
				"res",
				"resizeContainer"
			],
			[
				"conta",
				"containerResize"
			],
			[
				"CAN",
				"CANVAS_WIDTH"
			],
			[
				"CA",
				"CANVAS_HEIGHT"
			],
			[
				"mouse",
				"mouseWheel"
			],
			[
				"ge",
				"geometry"
			],
			[
				"proto",
				"prototype"
			],
			[
				"se",
				"segW"
			],
			[
				"star",
				"stars"
			],
			[
				"direct",
				"directionalLight"
			],
			[
				"plane",
				"Planet"
			],
			[
				"planet",
				"planetId"
			],
			[
				"_",
				"_SocketStatus"
			],
			[
				"connection",
				"connectionLoopId"
			]
		]
	},
	"buffers":
	[
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 1330,
				"line_ending": "Windows"
			}
		},
		{
			"file": "index.css",
			"settings":
			{
				"buffer_size": 988,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "\n\n//----------\n// utils\n\n// src: https://github.com/soulwire/sketch.js/blob/master/js/sketch.js\nfunction random( min, max ) {\n  if ( Object.prototype.toString.call( min ) == '[object Array]' )\n    return min[~~( Math.random() * min.length )];\n  if ( typeof max != 'number' )\n    max = min || 1, min = 0;\n  return min + Math.random() * ( max - min );\n}\nfunction extend( target, source, overwrite ) {\n  for ( var key in source )\n    if ( overwrite || !target.hasOwnProperty( key ) )\n      target[key] = source[key];\n  return target;\n}\n\n// src: Paul Irish obv\nwindow.requestAnimFrame = ( function () {\n  return window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    function (/* function FrameRequestCallback */ callback, /* DOMElement Element */ element ) {\n      window.setTimeout( callback, 1000 / 60 );\n    };\n} )();\n\n// src: http://stemkoski.github.io/Three.js/Sprite-Text-Labels.html\nfunction makeTextSprite( param ) {\n\n  var makeText = function ( parameters ) {\n    if ( parameters === undefined ) parameters = {};\n\n    this.label = this.label || {};\n\n    var text = parameters.text || this.label.text;\n\n    var fontface = parameters.fontface || this.label.fontface || \"Arial\";\n\n    var fontsize = parameters.fontsize || this.label.fontsize || 18;\n\n    var fontColor = parameters.fontColor || this.label.fontColor || new THREE.Color( 0 );\n\n    var borderThickness = parameters.borderThickness || this.label.borderThickness || 4;\n\n    var borderColor = parameters.borderColor || this.label.borderColor || new THREE.Color( 0 );\n\n    var backgroundColor = parameters.backgroundColor || this.label.backgroundColor || new THREE.Color( 0xFFFFFF );\n\n    var spriteAlignment = THREE.SpriteAlignment.topLeft;\n\n    var canvas = document.createElement( 'canvas' );\n    var context = canvas.getContext( '2d' );\n    context.font = \"Bold \" + fontsize + \"px \" + fontface;\n\n    // get size data (height depends only on font size)\n    var metrics = context.measureText( text );\n    var textWidth = metrics.width;\n\n    // background color\n    context.fillStyle = backgroundColor.getStyle();\n    // border color\n    context.strokeStyle = borderColor.getStyle();\n\n    context.lineWidth = borderThickness;\n\n    var roundRect = function ( ctx, x, y, w, h, r ) {\n      ctx.beginPath();\n      ctx.moveTo( x + r, y );\n      ctx.lineTo( x + w - r, y );\n      ctx.quadraticCurveTo( x + w, y, x + w, y + r );\n      ctx.lineTo( x + w, y + h - r );\n      ctx.quadraticCurveTo( x + w, y + h, x + w - r, y + h );\n      ctx.lineTo( x + r, y + h );\n      ctx.quadraticCurveTo( x, y + h, x, y + h - r );\n      ctx.lineTo( x, y + r );\n      ctx.quadraticCurveTo( x, y, x + r, y );\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n    };\n\n    roundRect( context, borderThickness / 2, borderThickness / 2, textWidth + borderThickness, fontsize * 1.4 + borderThickness, 6 );\n    // 1.4 is extra height factor for text below baseline: g,j,p,q.\n\n    // text color\n    context.fillStyle = fontColor.getStyle();\n\n    context.fillText( text, borderThickness, fontsize + borderThickness );\n\n    // canvas contents will be used for a texture\n    var texture = new THREE.Texture( canvas )\n    texture.needsUpdate = true;\n\n    this.material = new THREE.SpriteMaterial(\n      { map: texture, useScreenCoordinates: false, alignment: spriteAlignment } );\n\n    extend( this.label, {\n      text: text,\n      fontface: fontface, fontsize: fontsize, fontColor: fontColor,\n      borderThickness: borderThickness, borderColor: borderColor,\n      backgroundColor: backgroundColor\n    } );\n\n    sprite.visible = true;\n  };\n\n  var sprite = new THREE.Sprite();\n\n  makeText.call( sprite, param );\n\n  sprite.makeText = makeText.bind( sprite );\n\n  sprite.scale.set( 100, 50, 1.0 );\n\n  sprite.visible = false;\n\n  return sprite;\n}\n\n\nwindow.mouse = { x: 0, y: 0 };\n\n\nGame = function ( container ) {\n\n  var Colors = {\n    \"red\": 0xFF4444,\n    \"green\": 0x77FF55,\n    \"blue\": 0x0CCFFF,\n    \"yellow\": 0xEEEE11,\n    \"brown\": 0xCD853F,\n    \"white\": 0xFFFFFF\n  };\n\n  var Materials = {\n    default: new THREE.MeshLambertMaterial( { color: Colors.white, wireframe: true } ),\n\n    white: new THREE.MeshLambertMaterial( { color: Colors.white, wireframe: false, shading: THREE.FlatShading } ),\n    red: new THREE.MeshLambertMaterial( { color: Colors.red, wireframe: false, shading: THREE.FlatShading } ),\n    green: new THREE.MeshLambertMaterial( { color: Colors.green, wireframe: false, shading: THREE.FlatShading } ),\n    blue: new THREE.MeshLambertMaterial( { color: Colors.blue, wireframe: false, shading: THREE.FlatShading } ),\n    yellow: new THREE.MeshLambertMaterial( { color: Colors.yellow, wireframe: false, shading: THREE.FlatShading } ),\n    brown: new THREE.MeshLambertMaterial( { color: Colors.brown, wireframe: false, shading: THREE.FlatShading } ),\n\n    home: new THREE.MeshLambertMaterial( { color: Colors.green, wireframe: false, shading: THREE.FlatShading } )\n    //home: new THREE.ShaderMaterial(\n    //  {\n    //    uniforms:\n    //    {\n    //    },\n    //    vertexShader: document.getElementById( 'vsHome' ).textContent,\n    //    fragmentShader: document.getElementById( 'fsHome' ).textContent,\n    //    side: THREE.BackSide,\n    //    blending: THREE.AdditiveBlending,\n    //    transparent: true\n    //  }\n    //)\n  };\n\n\n// src: http://patorjk.com/software/taag/#p=display&v=2&f=Doh&t=Game\n\n/**********************************************************************************************************\n                                                                                   \n        GGGGGGGGGGGGG                                                              \n     GGG::::::::::::G                                                              \n   GG:::::::::::::::G                                                              \n  G:::::GGGGGGGG::::G                                                              \n G:::::G       GGGGGG  aaaaaaaaaaaaa      mmmmmmm    mmmmmmm       eeeeeeeeeeee    \nG:::::G                a::::::::::::a   mm:::::::m  m:::::::mm   ee::::::::::::ee  \nG:::::G                aaaaaaaaa:::::a m::::::::::mm::::::::::m e::::::eeeee:::::ee\nG:::::G    GGGGGGGGGG           a::::a m::::::::::::::::::::::me::::::e     e:::::e\nG:::::G    G::::::::G    aaaaaaa:::::a m:::::mmm::::::mmm:::::me:::::::eeeee::::::e\nG:::::G    GGGGG::::G  aa::::::::::::a m::::m   m::::m   m::::me:::::::::::::::::e \nG:::::G        G::::G a::::aaaa::::::a m::::m   m::::m   m::::me::::::eeeeeeeeeee  \n G:::::G       G::::Ga::::a    a:::::a m::::m   m::::m   m::::me:::::::e           \n  G:::::GGGGGGGG::::Ga::::a    a:::::a m::::m   m::::m   m::::me::::::::e          \n   GG:::::::::::::::Ga:::::aaaa::::::a m::::m   m::::m   m::::m e::::::::eeeeeeee  \n     GGG::::::GGG:::G a::::::::::aa:::am::::m   m::::m   m::::m  ee:::::::::::::e  \n        GGGGGG   GGGG  aaaaaaaaaa  aaaammmmmm   mmmmmm   mmmmmm    eeeeeeeeeeeeee  \n\n*/\n\n  var mouseMove = function ( e ) {\n    mouse.x = ( event.clientX / this.CANVAS_WIDTH ) * 2 - 1;\n    mouse.y = -( event.clientY / this.CANVAS_HEIGHT ) * 2 + 1;\n  };\n\n  var mouseWheel = function ( e ) {\n    this.camera.fov -= e.wheelDelta / 10;\n\n    this.camera.updateProjectionMatrix();\n  };\n\n  var mouseClick = function( e ) {\n\n    if(this.mouse.intersects.length>0)\n    this.stars.forEach(function(star){\n\n    });\n\n  };\n\n\n  var resizeContainer = function () {\n\n    this.CANVAS_WIDTH = window.innerWidth - 5;\n    this.CANVAS_HEIGHT = window.innerHeight - 5;\n\n    this.renderer.setSize( this.CANVAS_WIDTH, this.CANVAS_HEIGHT );\n\n    this.camera.left = this.CANVAS_WIDTH / -2;\n    this.camera.right = this.CANVAS_WIDTH / 2;\n    this.camera.top = this.CANVAS_HEIGHT / 2;\n    this.camera.bottom = this.CANVAS_HEIGHT / -2;\n\n    this.camera.aspect = this.CANVAS_WIDTH / this.CANVAS_HEIGHT;\n\n    this.camera.updateProjectionMatrix();\n  };\n\n\n  // vars for mouseMove\n  var ray = new THREE.Raycaster();\n  var projector = new THREE.Projector();\n  var directionVector = new THREE.Vector3();\n\n  Game.prototype.processMousePosition = function () {\n\n    // create a Ray with origin at the mouse position\n    //   and direction into the scene (camera direction)\n    directionVector = new THREE.Vector3( mouse.x, mouse.y, 1 );\n    projector.unprojectVector( directionVector, this.camera );\n    ray = new THREE.Raycaster( this.camera.position, directionVector.sub( this.camera.position ).normalize() );\n\n    // create an array containing all objects in the scene with which the ray intersects\n    this.mouse.intersects = ray.intersectObjects( this.scene.children );\n\n    this.mouse.planetIdHovered = [];\n\n    this.mouse.intersects.forEach( function ( intersection ) {\n      if ( intersection.object.planetId !== undefined ) { // Game.Planet.mesh has a planetId field\n        this.mouse.planetIdHovered.push( intersection.object.planetId );\n      }\n    }, this );\n\n\n\n\n    /**********\n     * TEST\n     */\n    if ( this.rayHelper.vOffsets == undefined ) {\n      this.rayHelper.vOffsets = this.rayHelper.geometry.vertices.slice( 3, 6 );\n    }\n\n    var rayOrigin = ray.ray.origin.clone();\n\n    var step = ray.ray.direction.clone().multiplyScalar( 5 );\n    var newTarget = rayOrigin.add( step );\n    while ( newTarget.z > 0 ) { newTarget.add( step ); }\n\n    this.rayHelper.geometry.vertices[3] = newTarget.clone().add( this.rayHelper.vOffsets[0] );\n    this.rayHelper.geometry.vertices[4] = newTarget.clone().add( this.rayHelper.vOffsets[1] );\n    this.rayHelper.geometry.vertices[5] = newTarget.clone().add( this.rayHelper.vOffsets[2] );\n\n    this.rayHelper.geometry.verticesNeedUpdate = true;\n\n  };\n\n  Game.prototype.update = function () {\n\n    if ( mouse.x != this.mouse.x || mouse.y != this.mouse.y ) {\n      this.mouse.x = mouse.x;\n      this.mouse.y = mouse.y;\n      this.processMousePosition();\n    }\n\n    for ( var i = this.stars.length - 1; i >= 0; i-- ) {\n      this.stars[i].update( this );\n    }\n\n  };\n\n  Game.prototype.render = function () {\n\n    window.requestAnimFrame( this.render.bind( this ) );\n\n    this.update();\n\n    this.renderer.render( this.scene, this.camera );\n\n  };\n\n\n\n/**********************************************************************************************************\n                                                                                                          \nPPPPPPPPPPPPPPPPP   lllllll                                                                 tttt          \nP::::::::::::::::P  l:::::l                                                              ttt:::t          \nP::::::PPPPPP:::::P l:::::l                                                              t:::::t          \nPP:::::P     P:::::Pl:::::l                                                              t:::::t          \n  P::::P     P:::::P l::::l   aaaaaaaaaaaaa  nnnn  nnnnnnnn        eeeeeeeeeeee    ttttttt:::::ttttttt    \n  P::::P     P:::::P l::::l   a::::::::::::a n:::nn::::::::nn    ee::::::::::::ee  t:::::::::::::::::t    \n  P::::PPPPPP:::::P  l::::l   aaaaaaaaa:::::an::::::::::::::nn  e::::::eeeee:::::eet:::::::::::::::::t    \n  P:::::::::::::PP   l::::l            a::::ann:::::::::::::::ne::::::e     e:::::etttttt:::::::tttttt    \n  P::::PPPPPPPPP     l::::l     aaaaaaa:::::a  n:::::nnnn:::::ne:::::::eeeee::::::e      t:::::t          \n  P::::P             l::::l   aa::::::::::::a  n::::n    n::::ne:::::::::::::::::e       t:::::t          \n  P::::P             l::::l  a::::aaaa::::::a  n::::n    n::::ne::::::eeeeeeeeeee        t:::::t          \n  P::::P             l::::l a::::a    a:::::a  n::::n    n::::ne:::::::e                 t:::::t    tttttt\nPP::::::PP          l::::::la::::a    a:::::a  n::::n    n::::ne::::::::e                t::::::tttt:::::t\nP::::::::P          l::::::la:::::aaaa::::::a  n::::n    n::::n e::::::::eeeeeeee        tt::::::::::::::t\nP::::::::P          l::::::l a::::::::::aa:::a n::::n    n::::n  ee:::::::::::::e          tt:::::::::::tt\nPPPPPPPPPP          llllllll  aaaaaaaaaa  aaaa nnnnnn    nnnnnn    eeeeeeeeeeeeee            ttttttttttt  \n                                                                                                          \n*/\n\n  Game.Planet = function ( param ) {\n    param = param || {};\n\n    this.mouseable = param.mouseable || true;\n    //radius\n    this.radius = param.radius || random( 7, 15 );\n    // speed\n    this.sx = param.sx || random( -0.5, 0.5 );\n    this.sy = param.sy || random( -0.5, 0.5 );\n    // acceleration\n    this.ax = param.ax || 0.0;\n    this.ay = param.ay || 0.0;\n    // rotation\n    this.rx = param.rx || random( -0.01, 0.008 );\n    this.ry = param.ry || random( -0.01, 0.008 );\n    // rotation speed\n    this.rsx = param.rsx || random( -0.01, 0.01 );\n    this.rsy = param.rsy || random( -0.01, 0.01 );\n    // nb segments of the sphere geometry\n    this.segW = param.segW || random( 5, 10 );\n    this.segH = param.segH || random( 5, 10 );\n\n    if ( param.material === undefined || !( param.material instanceof THREE.Material ) ) {\n      param.material = Materials.white;\n    }\n\n    this.material = param.material;\n\n    var geometry = new THREE.SphereGeometry( this.radius, this.segW, this.segH );\n    geometry.mergeVertices();\n\n    this.mesh = new THREE.Mesh( geometry, this.material );\n\n    this.mesh.position.x = param.x || 0;\n    this.mesh.position.y = param.y || 0;\n\n    this.mesh.rotation.x = param.rx || 0;\n    this.mesh.rotation.y = param.ry || 0;\n\n    this.mesh.glowMesh = this.initGlow( this.mesh );\n\n    this.knead( param.knead || .5 );\n\n    this.planetId = this.mesh.planetId = Game.Planet.prototype.planetId++;\n\n    this.mesh.name = \"Planet\" + this.planetId;\n    this.mesh.glowMesh.name = this.mesh.name + \"-\" + \"glowMesh\";\n\n\n    var font = new THREE.Color( 0xFFFFFF ),\n        border = this.material.color.clone().offsetHSL( 0, 0, 0.1 ),\n        back = this.material.color.clone().offsetHSL( 0, 0, -0.3 )\n    ;\n    this.label = makeTextSprite(\n      {\n        fontsize: 24,\n        fontColor: font,\n        borderColor: border,\n        backgroundColor: back,\n        text: \"init\"\n      }\n    );\n\n    this.mesh.add( this.label );\n\n  };\n\n  Game.Planet.prototype.planetId = 0;\n\n  Game.Planet.prototype.links = [];\n\n  Game.Planet.prototype.initGlow = function ( mesh ) {\n\n    //var mat = new THREE.ShaderMaterial(\n    //  {\n    //    uniforms:\n    //    {\n    //      glowColor: { type: \"v3\", value: mesh.material.color },\n    //      power: { type: \"f\", value: 1 }\n    //    },\n    //    vertexShader: document.getElementById( 'vsGlow' ).textContent,\n    //    fragmentShader: document.getElementById( 'fsGlow' ).textContent,\n    //    side: THREE.BackSide,\n    //    blending: THREE.AdditiveBlending,\n    //    transparent: true\n    //  }\n    //);\n    var mat = new THREE.MeshLambertMaterial( { color: Colors.white, transparent: true, opacity: 0.5, side: THREE.BackSide } );\n    var geom = new THREE.SphereGeometry( mesh.geometry.radius, 30, 30 );\n\n    var glowMesh = new THREE.Mesh( geom, mat );\n    //var glowMesh = mesh.clone();\n    //glowMesh.position = new THREE.Vector3();\n    //glowMesh.material = mat;\n\n    glowMesh.scale.x = glowMesh.scale.y = glowMesh.scale.z = 1.5;\n    glowMesh.visible = false;\n\n    mesh.add( glowMesh );\n\n    return glowMesh;\n  };\n\n  Game.Planet.prototype.update = function ( ctx ) {\n\n    if ( this.free ) {\n\n      this.mesh.position.x += this.sx;\n      this.mesh.position.y += this.sy;\n\n      this.sx += this.ax;\n      this.sy += this.ay;\n    }\n\n    this.mesh.rotation.x += this.rsx;\n    this.mesh.rotation.y += this.rsy;\n\n    if ( ctx.mouse.planetIdHovered.indexOf( this.planetId ) >= 0 ) {\n      this.mesh.glowMesh.visible = true;\n\n      //this.mouse.intersects.every( function ( o ) {\n      //  if ( o.object.planetId == this.id ) {\n\n      //    return false;\n      //  }\n      //  return true;\n      //} );\n    }\n    else {\n      this.mesh.glowMesh.visible = false;\n    }\n\n    this.links.forEach( function ( link ) { link.update( ctx ); } );\n  };\n\n  Game.Planet.prototype.knead = function ( min, max ) {\n    // rq: careful this is in not correct and only work for a planet at the origin\n\n    if ( min === undefined ) return;\n\n    if ( max === undefined ) {\n      var d = min / 2;\n      max = 1 + d;\n      min = 1 - d;\n    }\n\n    var r = this.radius / 10;\n\n    this.mesh.geometry.vertices.forEach( function ( v ) {\n\n      v.multiplyScalar( random( min, max ) );\n\n      v[random( ['x', 'y', 'z'] )] += random( r );\n\n    }, this.mesh );\n  };\n\n  Game.Planet.prototype.onClick = function ( ctx, e ) {\n\n    console.log( \"Planet#\" + this.id + \" onClick( \" + game + \", \" + e + \" );\" );\n\n  };\n\n\n  Game.PlanetYellow = function ( param ) {\n\n    param = param || {};\n    param.material = param.material || Materials.yellow;\n\n    Game.Planet.call( this, param );\n  };\n  Game.PlanetYellow.prototype = Object.create( Game.Planet.prototype );\n\n\n  Game.PlanetBlue = function ( param ) {\n\n    param = param || {};\n    param.material = param.material || Materials.blue;\n\n    Game.Planet.call( this, param );\n  };\n  Game.PlanetBlue.prototype = Object.create( Game.Planet.prototype );\n\n  Game.PlanetRed = function ( param ) {\n\n    param = param || {};\n    param.material = param.material || Materials.red;\n\n    Game.Planet.call( this, param );\n  };\n  Game.PlanetRed.prototype = Object.create( Game.Planet.prototype );\n\n\n\n/**********************************************************************************************************\n\nLLLLLLLLLLL               iiii                   kkkkkkkk           \nL:::::::::L              i::::i                  k::::::k           \nL:::::::::L               iiii                   k::::::k           \nLL:::::::LL                                      k::::::k           \n  L:::::L               iiiiiiinnnn  nnnnnnnn     k:::::k    kkkkkkk\n  L:::::L               i:::::in:::nn::::::::nn   k:::::k   k:::::k \n  L:::::L                i::::in::::::::::::::nn  k:::::k  k:::::k  \n  L:::::L                i::::inn:::::::::::::::n k:::::k k:::::k   \n  L:::::L                i::::i  n:::::nnnn:::::n k::::::k:::::k    \n  L:::::L                i::::i  n::::n    n::::n k:::::::::::k     \n  L:::::L                i::::i  n::::n    n::::n k:::::::::::k     \n  L:::::L         LLLLLL i::::i  n::::n    n::::n k::::::k:::::k    \nLL:::::::LLLLLLLLL:::::Li::::::i n::::n    n::::nk::::::k k:::::k   \nL::::::::::::::::::::::Li::::::i n::::n    n::::nk::::::k  k:::::k  \nL::::::::::::::::::::::Li::::::i n::::n    n::::nk::::::k   k:::::k \nLLLLLLLLLLLLLLLLLLLLLLLLiiiiiiii nnnnnn    nnnnnnkkkkkkkk    kkkkkkk\n   \n*/\n\n\n  Game.Link = function ( param ) {\n\n    param = param || {};\n    this.id = Game.Link.prototype.id++;\n  };\n\n  Game.Link.prototype.id = 0;\n\n  Game.Link.prototype.update = function ( ctx ) {\n    /*\n    var axis, radians;\n\n    rotObjectMatrix = new THREE.Matrix4();\n    rotObjectMatrix.makeRotationAxis(axis.normalize(), radians);\n\n    this.matrix.multiplySelf(rotObjectMatrix);\n\n    this.rotation.setEulerFromRotationMatrix(this.matrix);\n    */\n  };\n\n\n  Game.LinkCurves = function ( param ) {\n\n    if ( typeof param === \"undefined\" || param.source === undefined || param.target === undefined )\n      return;\n\n    Game.Link.call( this, param );\n\n    this.source = param.source;\n    this.target = param.target;\n\n    this.material = param.material || Materials.default;\n\n    var getControlPoints = function ( p0, p1, nbSeg ) {\n      var pts = [],\n        cursor = p0.clone(),\n        n = p1.clone().sub( p0 ).divideScalar( nbSeg )\n      ;\n\n      pts.push( p0 );\n\n      for ( var i = nbSeg - 1; i > 1; i-- ) {\n\n        cursor.add( n );\n\n        pts.push( cursor.clone() );\n\n      }\n\n      pts.push( p1.clone() );\n\n      return pts;\n    }\n\n    var getNoisePoints = function ( controlPoints, amount ) {\n      var pts = [], pt,\n        l = controlPoints.length - 2,\n        halfAmount = amount / 2\n      ;\n\n      pts.push( controlPoints[l + 1] );\n\n      for ( var i = l; i > 1; i-- ) {\n\n        pt = controlPoints[i];\n\n        pts.push( new THREE.Vector3(\n          pt.x,\n          pt.y + random( amount ) - halfAmount,\n          pt.z + random( amount ) - halfAmount\n        ) );\n      }\n\n      pts.push( controlPoints[0] );\n\n      return pts;\n    }\n\n    var p0 = this.source.position,\n        p1 = this.target.position,\n        distance = p0.distanceTo( p1 ),\n        ctrlPts,\n        nbCtrlPts = Math.round( distance / 30 ),\n        nbSeg = nbCtrlPts * 5, radiusSeg = 3,\n        noiseAmount = 20\n    ;\n\n    ctrlPts = getControlPoints( p0, p1, nbCtrlPts );\n\n    var geometry =\n      new THREE.TubeGeometry(\n        new THREE.SplineCurve3(\n          getNoisePoints( ctrlPts, noiseAmount )\n        ), nbSeg, 2, radiusSeg, false\n    );\n\n    THREE.GeometryUtils.merge( geometry,\n      new THREE.TubeGeometry(\n        new THREE.SplineCurve3(\n          getNoisePoints( ctrlPts, noiseAmount )\n        ), nbSeg, 2, radiusSeg, false\n      )\n    );\n\n    this.mesh = new THREE.Mesh(\n      geometry,\n      this.material\n    );\n  };\n\n  Game.LinkCurves.prototype = Object.create( Game.Link.prototype );\n\n\n\n\n\n\n  /**********\n   * Init\n   */\n\n  this.map = [{\n    name: \"0\",\n    home: new Game.Planet( {\n      radius: 50,\n      rx: random( 1 ), ry: random( 1 ),\n      //rsx: random( .05 ), rsy: random( .05 ),\n      //material: \"home\",\n      rsx: Number.MIN_VALUE, rsy: Number.MIN_VALUE,\n      material: Materials.home,\n      segW: 12, segH: 8, knead: .5\n    } ),\n    planets: [\n      new Game.PlanetRed( { x: -150, y: 150 } ),\n      new Game.PlanetRed( { x: 200, y: 20 } ),\n      new Game.PlanetYellow( { x: -200, y: -200 } ),\n      new Game.PlanetYellow( { x: 150, y: 200 } ),\n      new Game.PlanetBlue( { x: 500, y: -250 } ),\n      new Game.PlanetBlue( { x: -500, y: 100 } )\n    ]\n  }];\n\n  this.container = container || document.body;//getElementById(\"container\")\n\n  this.currentMapIndex = 0;\n\n  //this.CANVAS_WIDTH = 640, this.CANVAS_HEIGHT = 480;\n  this.CANVAS_WIDTH = window.innerWidth - 5;\n  this.CANVAS_HEIGHT = window.innerHeight - 5;\n  //this.CANVAS_WIDTH = container.clientWidth;\n  //this.CANVAS_HEIGHT = container.clientHeight;\n\n  this.renderer = new THREE.WebGLRenderer();\n\n  this.renderer.setSize( this.CANVAS_WIDTH, this.CANVAS_HEIGHT );\n\n  this.container.appendChild( this.renderer.domElement );\n\n  this.mouse = { x: 0, y: 0, intersects: [], planetIdHovered: [] };\n\n  this.scene = new THREE.Scene();\n\n  this.stars = [];\n\n  var currentMap = this.map[this.currentMapIndex];\n\n  // create home\n  this.home = currentMap.home;\n  this.stars.push( this.home );\n  this.scene.add( this.home.mesh );\n\n  //console.log(\"Created \" + p.mesh.name + \" #\" + p.id + \". proto=#\" + Planet.prototype.id);\n\n  // create satellites\n  for ( var i = currentMap.planets.length - 1; i >= 0; i-- ) {\n\n    p = currentMap.planets[i];\n\n    this.stars.push( p );\n\n    this.scene.add( p.mesh );\n\n    //console.log(\"Created \" + p.mesh.name + \" #\" + p.id + \". proto=#\" + Planet.prototype.id);\n\n  };\n\n  /*\n    // set a hemisphere light\n    var hemiLight = new THREE.HemisphereLight( 0xffffff, 0xdddddd, .6 );\n    scene.add( hemiLight );\n  */\n\n  // set a directional light\n  //var directionalLight = new THREE.DirectionalLight( 0xffffff, .75 );\n  //directionalLight.direction = new THREE.Vector3( 0, 0, -1 );\n  //directionalLight.position.z = 500;\n  //directionalLight.name = \"directionalLight\";\n  //this.scene.add( directionalLight );\n\n  var pointLight0 = new THREE.PointLight( 0xffffff, 1 );\n  pointLight0.position.set( 0, 0, 500 );\n  pointLight0.name = \"pointLight0\";\n  this.scene.add( pointLight0 );\n\n\n  // set point lights\n  var\n    lightZ = 0,\n    lightXY = 400,\n    lightColor = Colors.white,\n    lightIntensity = .4,\n    lightDistance = undefined,\n    lightHelpers = false;\n  ;\n\n  var pointLight0 = new THREE.PointLight( lightColor, lightIntensity, lightDistance );\n  pointLight0.position.set( -lightXY, lightXY, lightZ );\n  pointLight0.name = \"pointLight0\";\n  this.scene.add( pointLight0 ); if ( lightHelpers )\n    this.scene.add( new THREE.PointLightHelper( pointLight0, 10 ) );\n\n  var pointLight1 = new THREE.PointLight( lightColor, lightIntensity, lightDistance );\n  pointLight1.position.set( lightXY, lightXY, lightZ );\n  pointLight1.name = \"pointLight0\";\n  this.scene.add( pointLight1 ); if ( lightHelpers )\n    this.scene.add( new THREE.PointLightHelper( pointLight1, 10 ) );\n\n  var pointLight2 = new THREE.PointLight( lightColor, lightIntensity, lightDistance );\n  pointLight2.position.set( lightXY, -lightXY, lightZ );\n  pointLight2.name = \"pointLight0\";\n  this.scene.add( pointLight2 ); if ( lightHelpers )\n    this.scene.add( new THREE.PointLightHelper( pointLight2, 10 ) );\n\n  var pointLight3 = new THREE.PointLight( lightColor, lightIntensity, lightDistance );\n  pointLight3.position.set( -lightXY, -lightXY, lightZ );\n  pointLight3.name = \"pointLight3\";\n  this.scene.add( pointLight3 ); if ( lightHelpers )\n    this.scene.add( new THREE.PointLightHelper( pointLight3, 10 ) );\n\n  /*\n  var ambientLight = new THREE.AmbientLight( 0x444444 );\n  ambientLight.name = \"ambientLight\";\n  scene.add(ambientLight);\n  */\n\n  window.addEventListener( 'resize', resizeContainer.bind( this ) );\n\n  window.addEventListener( 'mousewheel', mouseWheel.bind( this ) );\n\n  this.container.addEventListener( 'mousemove', mouseMove.bind( this ) );\n\n\n  var width = this.CANVAS_WIDTH,\n      height = this.CANVAS_HEIGHT;\n\n  //this.camera = new THREE.OrthographicCamera( width / -2, width / 2, height / 2, height / -2, -100, 600 );\n\n  this.camera = new THREE.PerspectiveCamera( 90, width / height, 1, 600 );\n  this.camera.position.set( 0, 0, 500 );\n\n  //var SCREEN_WIDTH = window.innerWidth, SCREEN_HEIGHT = window.innerHeight;\n  //var VIEW_ANGLE = 45, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 0.1, FAR = 20000;\n  //this.camera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT, NEAR, FAR );\n  //this.scene.add( this.camera );\n  //this.camera.position.set( 0, 150, 400 );\n  //this.camera.lookAt( this.scene.position );\n\n\n\n\n\n\n  /**************\n   * TEST volumetric curves\n   */\n\n  var target = this.stars[Math.round( random( 1, this.stars.length - 1 ) )].mesh;\n\n  var linkTest = new Game.LinkCurves(\n    {\n      source: this.home.mesh,\n      target: target,\n      material: target.material\n    }\n  );\n\n  this.scene.add( linkTest.mesh );\n\n\n  /**************\n   * TEST ray picking helper\n   */\n\n  this.scene.add(\n    this.rayHelper =\n    new THREE.Mesh(\n      new THREE.TubeGeometry(\n        new THREE.LineCurve( this.camera.position.clone().add( new THREE.Vector3( 0, -20, 0 ) ), this.home.mesh.position ),\n        /*segments*/1, /*radius*/5, /*segments radius*/3, /*closed*/false, /*debug*/true\n      ),\n      Materials.red\n    )\n  );\n  this.rayHelper.visible = false;\n\n  /**************/\n};\n\n\n\nvar game;\n\ntry {\n  game = new Game();\n}\ncatch ( error ) {\n  nogl = document.getElementById( \"nogl\" );\n  nogl.innerHTML += \"<h2>\" + error.message + \"</h2>\";\n  nogl.innerHTML += \"<p>\" + error.stack + \"</p>\";\n  nogl.style.display = 'block';\n}\n\nif ( window.game !== undefined )\n  game.render();\n\n\n\n\n\n\n\n\n// next step: http://stemkoski.github.io/Three.js/Mouse-Over.html\n// or http://yomotsu.github.io/threejs-examples/ray_basic/\n// http://www.89a.co.uk/page/14\n// http://mrdoob.github.io/three.js/examples/canvas_lines.html\n",
			"file": "index.js",
			"file_size": 28008,
			"file_write_time": 130208613674404829,
			"settings":
			{
				"buffer_size": 27272,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"pack",
				"Preferences: Browse Packages"
			],
			[
				"packa",
				"Preferences: Browse Packages"
			]
		],
		"width": 416.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/gpe/AppData/Roaming/Sublime Text 3/Packages/User/JavaScript.sublime-settings",
		"/C/Users/gpe/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/gpe/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/gpe/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Users/gpe/Documents/Visual Studio 2012/Projects/development(msc)/src/mpro.excel/mpro.excel.csproj",
		"/C/Users/gpe/Documents/Visual Studio 2012/Projects/development(msc)/src/mpro.excel/mpro.excel.json",
		"/C/Users/gpe/Desktop/bak/src/mpro.excel/mpro.excel.csproj",
		"/C/Users/gpe/Desktop/bak/src/mpro.excel/mpro.excel.json",
		"/C/Users/gpe/Documents/Visual Studio 2012/Projects/development(msc)/WebSockets.html",
		"/W/public/mpro.excel.json",
		"/C/Users/gpe/Documents/Visual Studio 2012/Projects/TestWebSocket/Alchemy-Websockets/Alchemy.sln.DotSettings.user",
		"/C/Users/gpe/Documents/Visual Studio 2012/Settings/monokai-according-to-sublime-text-editor-2.vssettings",
		"/C/Users/gpe/Downloads/sublime-text-2-new-edition.vssettings",
		"/C/Users/gpe/AppData/Roaming/Microsoft/Windows/Libraries/VS 2012.library-ms",
		"/C/Users/gpe/AppData/Roaming/Microsoft/Windows/Libraries/VS 2010.library-ms",
		"/C/Users/gpe/AppData/Roaming/Microsoft/Windows/Libraries/VS Project.library-ms",
		"//srv-cockpit/Temp/uw/test insert.sql"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"stars",
			"this.stars",
			"stars",
			"precision",
			"position",
			"zoom",
			"CANVAS_HEIGHT",
			"this.geometr",
			"500",
			"\n  //---------\n  // Map\n  //\n",
			"', '",
			"scene.a",
			"\\n",
			"\\n|\\s*",
			"\\n\\s*",
			"\\n",
			"\\r\\n",
			"\\\\r\\\\n",
			"currentSessionDiv",
			"logger",
			"LoggerWeb",
			"0E3A6C",
			"marg"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"lightXY",
			": undefined, ",
			"\"+\\n\"",
			"",
			"\\r\\n"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1330,
						"regions":
						{
						},
						"selection":
						[
							[
								608,
								608
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 126.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "index.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 988,
						"regions":
						{
						},
						"selection":
						[
							[
								283,
								283
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "index.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27272,
						"regions":
						{
						},
						"selection":
						[
							[
								7325,
								7325
							]
						],
						"settings":
						{
							"auto_name": "",
							"spell_check": false,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2466.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"project": "",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"C:\\Users\\gpe\\Documents\\default.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
